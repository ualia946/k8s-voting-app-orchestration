name: Inicialización de la Infraestructura

on: workflow_dispatch

# Variables de entorno para las imágenes
env:
  IMAGE_MAP: >-
    kodekloud/examplevotingapp_vote:v1,voteapp,v1
    redis:8.0-alpine,redis,v1
    dockersamples/examplevotingapp_worker,worker,v1
    postgres:16,postgres,v1
    kodekloud/examplevotingapp_result:v1,result,v1
  
jobs:
  create-terraform-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Terraform Installation
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Inits Backend
        run: terraform -chdir=./terraform/backend init

      - name: Terraform Creates remote tfstate
        run: terraform -chdir=./terraform/backend apply -auto-approve

      - name: Terraform Deploys Main Infraestructure
        id: acr_output
        working-directory: ./terraform
        run: |
          terraform init
          terraform apply -auto-approve
          echo "ACR_NAME=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT

      - name:  Login, Tag, and Push Images to ACR
        run: |
          ACR_NAME="${{ steps.acr_output.outputs.ACR_NAME }}"
          az acr login --name "$ACR_NAME"

          #Bucle para procesar cada imagen del mapa
          for image_pair in ${{ env.IMAGE_MAP }}; do
            IFS="," read -r public_image new_name new_tag <<< "$image_pair"

            full_public_image="$public_image"
            full_private_image="$ACR_NAME.azurecr.io/$new_name:$new_tag"

            docker pull "$full_public_image"
            docker tag "$full_public_image" "$full_private_image"
            docker push "$full_private_image"
            
          done
        
